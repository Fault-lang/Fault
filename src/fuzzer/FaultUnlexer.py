# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(range(49, 58)))
charset_1 = list(chain(range(48, 58)))
charset_2 = list(chain(range(120, 121), range(88, 89)))
charset_3 = list(chain(*multirange_diff(printable_unicode_ranges, [(96, 97)])))
charset_4 = list(chain(*multirange_diff(printable_unicode_ranges, [(34, 35),(92, 93)])))
charset_5 = list(chain(range(32, 33), range(9, 10)))
charset_6 = list(chain(range(13, 14), range(10, 11)))
charset_7 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14)])))
charset_8 = list(chain(range(97, 98), range(98, 99), range(102, 103), range(110, 111), range(114, 115), range(116, 117), range(118, 119), range(92, 93), range(39, 40), range(34, 35)))
charset_9 = list(chain(range(48, 58)))
charset_10 = list(chain(range(48, 56)))
charset_11 = list(chain(range(48, 58), range(97, 103), range(65, 71)))
charset_12 = list(chain(range(101, 102), range(69, 70)))
charset_13 = list(chain(range(43, 44), range(45, 46)))
charset_14 = list(chain(range(48, 58)))
charset_15 = list(chain(range(1632, 1642)))
charset_16 = list(chain(range(1776, 1786)))
charset_17 = list(chain(range(2406, 2416)))
charset_18 = list(chain(range(2534, 2544)))
charset_19 = list(chain(range(2662, 2672)))
charset_20 = list(chain(range(2790, 2800)))
charset_21 = list(chain(range(2918, 2928)))
charset_22 = list(chain(range(3047, 3056)))
charset_23 = list(chain(range(3174, 3184)))
charset_24 = list(chain(range(3302, 3312)))
charset_25 = list(chain(range(3430, 3440)))
charset_26 = list(chain(range(3664, 3674)))
charset_27 = list(chain(range(3792, 3802)))
charset_28 = list(chain(range(3872, 3882)))
charset_29 = list(chain(range(4160, 4170)))
charset_30 = list(chain(range(4969, 4978)))
charset_31 = list(chain(range(6112, 6122)))
charset_32 = list(chain(range(6160, 6170)))
charset_33 = list(chain(range(65296, 65306)))
charset_34 = list(chain(range(65, 91)))
charset_35 = list(chain(range(97, 123)))
charset_36 = list(chain(range(170, 171)))
charset_37 = list(chain(range(181, 182)))
charset_38 = list(chain(range(186, 187)))
charset_39 = list(chain(range(192, 215)))
charset_40 = list(chain(range(216, 247)))
charset_41 = list(chain(range(248, 544)))
charset_42 = list(chain(range(546, 564)))
charset_43 = list(chain(range(592, 686)))
charset_44 = list(chain(range(688, 697)))
charset_45 = list(chain(range(699, 706)))
charset_46 = list(chain(range(720, 722)))
charset_47 = list(chain(range(736, 741)))
charset_48 = list(chain(range(750, 751)))
charset_49 = list(chain(range(890, 891)))
charset_50 = list(chain(range(902, 903)))
charset_51 = list(chain(range(904, 907)))
charset_52 = list(chain(range(908, 909)))
charset_53 = list(chain(range(910, 930)))
charset_54 = list(chain(range(931, 975)))
charset_55 = list(chain(range(976, 984)))
charset_56 = list(chain(range(986, 1012)))
charset_57 = list(chain(range(1024, 1154)))
charset_58 = list(chain(range(1164, 1221)))
charset_59 = list(chain(range(1223, 1225)))
charset_60 = list(chain(range(1227, 1229)))
charset_61 = list(chain(range(1232, 1270)))
charset_62 = list(chain(range(1272, 1274)))
charset_63 = list(chain(range(1329, 1367)))
charset_64 = list(chain(range(1369, 1370)))
charset_65 = list(chain(range(1377, 1416)))
charset_66 = list(chain(range(1488, 1515)))
charset_67 = list(chain(range(1520, 1523)))
charset_68 = list(chain(range(1569, 1595)))
charset_69 = list(chain(range(1600, 1611)))
charset_70 = list(chain(range(1649, 1748)))
charset_71 = list(chain(range(1749, 1750)))
charset_72 = list(chain(range(1765, 1767)))
charset_73 = list(chain(range(1786, 1789)))
charset_74 = list(chain(range(1808, 1809)))
charset_75 = list(chain(range(1810, 1837)))
charset_76 = list(chain(range(1920, 1958)))
charset_77 = list(chain(range(2309, 2362)))
charset_78 = list(chain(range(2365, 2366)))
charset_79 = list(chain(range(2384, 2385)))
charset_80 = list(chain(range(2392, 2402)))
charset_81 = list(chain(range(2437, 2445)))
charset_82 = list(chain(range(2447, 2449)))
charset_83 = list(chain(range(2451, 2473)))
charset_84 = list(chain(range(2474, 2481)))
charset_85 = list(chain(range(2482, 2483)))
charset_86 = list(chain(range(2486, 2490)))
charset_87 = list(chain(range(2524, 2526)))
charset_88 = list(chain(range(2527, 2530)))
charset_89 = list(chain(range(2544, 2546)))
charset_90 = list(chain(range(2565, 2571)))
charset_91 = list(chain(range(2575, 2577)))
charset_92 = list(chain(range(2579, 2601)))
charset_93 = list(chain(range(2602, 2609)))
charset_94 = list(chain(range(2610, 2612)))
charset_95 = list(chain(range(2613, 2615)))
charset_96 = list(chain(range(2616, 2618)))
charset_97 = list(chain(range(2649, 2653)))
charset_98 = list(chain(range(2654, 2655)))
charset_99 = list(chain(range(2674, 2677)))
charset_100 = list(chain(range(2693, 2700)))
charset_101 = list(chain(range(2701, 2702)))
charset_102 = list(chain(range(2703, 2706)))
charset_103 = list(chain(range(2707, 2729)))
charset_104 = list(chain(range(2730, 2737)))
charset_105 = list(chain(range(2738, 2740)))
charset_106 = list(chain(range(2741, 2746)))
charset_107 = list(chain(range(2749, 2750)))
charset_108 = list(chain(range(2768, 2769)))
charset_109 = list(chain(range(2784, 2785)))
charset_110 = list(chain(range(2821, 2829)))
charset_111 = list(chain(range(2831, 2833)))
charset_112 = list(chain(range(2835, 2857)))
charset_113 = list(chain(range(2858, 2865)))
charset_114 = list(chain(range(2866, 2868)))
charset_115 = list(chain(range(2870, 2874)))
charset_116 = list(chain(range(2877, 2878)))
charset_117 = list(chain(range(2908, 2910)))
charset_118 = list(chain(range(2911, 2914)))
charset_119 = list(chain(range(2949, 2955)))
charset_120 = list(chain(range(2958, 2961)))
charset_121 = list(chain(range(2962, 2966)))
charset_122 = list(chain(range(2969, 2971)))
charset_123 = list(chain(range(2972, 2973)))
charset_124 = list(chain(range(2974, 2976)))
charset_125 = list(chain(range(2979, 2981)))
charset_126 = list(chain(range(2984, 2987)))
charset_127 = list(chain(range(2990, 2998)))
charset_128 = list(chain(range(2999, 3002)))
charset_129 = list(chain(range(3077, 3085)))
charset_130 = list(chain(range(3086, 3089)))
charset_131 = list(chain(range(3090, 3113)))
charset_132 = list(chain(range(3114, 3124)))
charset_133 = list(chain(range(3125, 3130)))
charset_134 = list(chain(range(3168, 3170)))
charset_135 = list(chain(range(3205, 3213)))
charset_136 = list(chain(range(3214, 3217)))
charset_137 = list(chain(range(3218, 3241)))
charset_138 = list(chain(range(3242, 3252)))
charset_139 = list(chain(range(3253, 3258)))
charset_140 = list(chain(range(3294, 3295)))
charset_141 = list(chain(range(3296, 3298)))
charset_142 = list(chain(range(3333, 3341)))
charset_143 = list(chain(range(3342, 3345)))
charset_144 = list(chain(range(3346, 3369)))
charset_145 = list(chain(range(3370, 3386)))
charset_146 = list(chain(range(3424, 3426)))
charset_147 = list(chain(range(3461, 3479)))
charset_148 = list(chain(range(3482, 3506)))
charset_149 = list(chain(range(3507, 3516)))
charset_150 = list(chain(range(3517, 3518)))
charset_151 = list(chain(range(3520, 3527)))
charset_152 = list(chain(range(3585, 3633)))
charset_153 = list(chain(range(3634, 3636)))
charset_154 = list(chain(range(3648, 3655)))
charset_155 = list(chain(range(3713, 3715)))
charset_156 = list(chain(range(3716, 3717)))
charset_157 = list(chain(range(3719, 3721)))
charset_158 = list(chain(range(3722, 3723)))
charset_159 = list(chain(range(3725, 3726)))
charset_160 = list(chain(range(3732, 3736)))
charset_161 = list(chain(range(3737, 3744)))
charset_162 = list(chain(range(3745, 3748)))
charset_163 = list(chain(range(3749, 3750)))
charset_164 = list(chain(range(3751, 3752)))
charset_165 = list(chain(range(3754, 3756)))
charset_166 = list(chain(range(3757, 3761)))
charset_167 = list(chain(range(3762, 3764)))
charset_168 = list(chain(range(3773, 3781)))
charset_169 = list(chain(range(3782, 3783)))
charset_170 = list(chain(range(3804, 3806)))
charset_171 = list(chain(range(3840, 3841)))
charset_172 = list(chain(range(3904, 3947)))
charset_173 = list(chain(range(3976, 3980)))
charset_174 = list(chain(range(4096, 4130)))
charset_175 = list(chain(range(4131, 4136)))
charset_176 = list(chain(range(4137, 4139)))
charset_177 = list(chain(range(4176, 4182)))
charset_178 = list(chain(range(4256, 4294)))
charset_179 = list(chain(range(4304, 4343)))
charset_180 = list(chain(range(4352, 4442)))
charset_181 = list(chain(range(4447, 4515)))
charset_182 = list(chain(range(4520, 4602)))
charset_183 = list(chain(range(4608, 4615)))
charset_184 = list(chain(range(4616, 4679)))
charset_185 = list(chain(range(4680, 4681)))
charset_186 = list(chain(range(4682, 4686)))
charset_187 = list(chain(range(4688, 4695)))
charset_188 = list(chain(range(4696, 4697)))
charset_189 = list(chain(range(4698, 4702)))
charset_190 = list(chain(range(4704, 4743)))
charset_191 = list(chain(range(4744, 4745)))
charset_192 = list(chain(range(4746, 4750)))
charset_193 = list(chain(range(4752, 4783)))
charset_194 = list(chain(range(4784, 4785)))
charset_195 = list(chain(range(4786, 4790)))
charset_196 = list(chain(range(4792, 4799)))
charset_197 = list(chain(range(4800, 4801)))
charset_198 = list(chain(range(4802, 4806)))
charset_199 = list(chain(range(4808, 4815)))
charset_200 = list(chain(range(4816, 4823)))
charset_201 = list(chain(range(4824, 4847)))
charset_202 = list(chain(range(4848, 4879)))
charset_203 = list(chain(range(4880, 4881)))
charset_204 = list(chain(range(4882, 4886)))
charset_205 = list(chain(range(4888, 4895)))
charset_206 = list(chain(range(4896, 4935)))
charset_207 = list(chain(range(4936, 4955)))
charset_208 = list(chain(range(5024, 5041)))
charset_209 = list(chain(range(5041, 5109)))
charset_210 = list(chain(range(5121, 5751)))
charset_211 = list(chain(range(5761, 5787)))
charset_212 = list(chain(range(5792, 5867)))
charset_213 = list(chain(range(6016, 6068)))
charset_214 = list(chain(range(6176, 6264)))
charset_215 = list(chain(range(6272, 6313)))
charset_216 = list(chain(range(7680, 7836)))
charset_217 = list(chain(range(7840, 7905)))
charset_218 = list(chain(range(7905, 7930)))
charset_219 = list(chain(range(7936, 7958)))
charset_220 = list(chain(range(7960, 7966)))
charset_221 = list(chain(range(7968, 7994)))
charset_222 = list(chain(range(7994, 8006)))
charset_223 = list(chain(range(8008, 8014)))
charset_224 = list(chain(range(8016, 8024)))
charset_225 = list(chain(range(8025, 8026)))
charset_226 = list(chain(range(8027, 8028)))
charset_227 = list(chain(range(8029, 8030)))
charset_228 = list(chain(range(8031, 8062)))
charset_229 = list(chain(range(8064, 8117)))
charset_230 = list(chain(range(8118, 8125)))
charset_231 = list(chain(range(8126, 8127)))
charset_232 = list(chain(range(8130, 8133)))
charset_233 = list(chain(range(8134, 8141)))
charset_234 = list(chain(range(8144, 8148)))
charset_235 = list(chain(range(8150, 8156)))
charset_236 = list(chain(range(8160, 8173)))
charset_237 = list(chain(range(8178, 8181)))
charset_238 = list(chain(range(8182, 8189)))
charset_239 = list(chain(range(8319, 8320)))
charset_240 = list(chain(range(8450, 8451)))
charset_241 = list(chain(range(8455, 8456)))
charset_242 = list(chain(range(8458, 8468)))
charset_243 = list(chain(range(8469, 8470)))
charset_244 = list(chain(range(8473, 8478)))
charset_245 = list(chain(range(8484, 8485)))
charset_246 = list(chain(range(8486, 8487)))
charset_247 = list(chain(range(8488, 8489)))
charset_248 = list(chain(range(8490, 8494)))
charset_249 = list(chain(range(8495, 8498)))
charset_250 = list(chain(range(8499, 8506)))
charset_251 = list(chain(range(8544, 8580)))
charset_252 = list(chain(range(12293, 12296)))
charset_253 = list(chain(range(12321, 12330)))
charset_254 = list(chain(range(12337, 12342)))
charset_255 = list(chain(range(12344, 12347)))
charset_256 = list(chain(range(12353, 12437)))
charset_257 = list(chain(range(12445, 12447)))
charset_258 = list(chain(range(12449, 12539)))
charset_259 = list(chain(range(12540, 12543)))
charset_260 = list(chain(range(12549, 12589)))
charset_261 = list(chain(range(12593, 12687)))
charset_262 = list(chain(range(12704, 12728)))
charset_263 = list(chain(range(13312, 13313)))
charset_264 = list(chain(range(19893, 19894)))
charset_265 = list(chain(range(19968, 19969)))
charset_266 = list(chain(range(40869, 40870)))
charset_267 = list(chain(range(40960, 42125)))
charset_268 = list(chain(range(44032, 44033)))
charset_269 = list(chain(range(55203, 55204)))
charset_270 = list(chain(range(63744, 64046)))
charset_271 = list(chain(range(64256, 64263)))
charset_272 = list(chain(range(64275, 64280)))
charset_273 = list(chain(range(64285, 64286)))
charset_274 = list(chain(range(64287, 64297)))
charset_275 = list(chain(range(64298, 64311)))
charset_276 = list(chain(range(64312, 64317)))
charset_277 = list(chain(range(64318, 64319)))
charset_278 = list(chain(range(64320, 64322)))
charset_279 = list(chain(range(64323, 64325)))
charset_280 = list(chain(range(64326, 64434)))
charset_281 = list(chain(range(64467, 64830)))
charset_282 = list(chain(range(64848, 64912)))
charset_283 = list(chain(range(64914, 64968)))
charset_284 = list(chain(range(65008, 65020)))
charset_285 = list(chain(range(65136, 65139)))
charset_286 = list(chain(range(65140, 65141)))
charset_287 = list(chain(range(65142, 65277)))
charset_288 = list(chain(range(65313, 65339)))
charset_289 = list(chain(range(65345, 65371)))
charset_290 = list(chain(range(65382, 65471)))
charset_291 = list(chain(range(65474, 65480)))
charset_292 = list(chain(range(65482, 65488)))
charset_293 = list(chain(range(65490, 65496)))
charset_294 = list(chain(range(65498, 65501)))


class FaultUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf'), weights=None, cooldown=1.0):
        super(FaultUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.weights = weights or dict()
        self.cooldown = cooldown

    def EOF(self, *args, **kwargs):
        pass

    @depthcontrol
    def ALL(self):
        current = self.create_node(UnlexerRule(name='ALL'))
        current += self.create_node(UnlexerRule(src='all'))
        return current
    ALL.min_depth = 0

    @depthcontrol
    def ASSERT(self):
        current = self.create_node(UnlexerRule(name='ASSERT'))
        current += self.create_node(UnlexerRule(src='assert'))
        return current
    ASSERT.min_depth = 0

    @depthcontrol
    def CLOCK(self):
        current = self.create_node(UnlexerRule(name='CLOCK'))
        current += self.create_node(UnlexerRule(src='clock'))
        return current
    CLOCK.min_depth = 0

    @depthcontrol
    def CONST(self):
        current = self.create_node(UnlexerRule(name='CONST'))
        current += self.create_node(UnlexerRule(src='const'))
        return current
    CONST.min_depth = 0

    @depthcontrol
    def DEF(self):
        current = self.create_node(UnlexerRule(name='DEF'))
        current += self.create_node(UnlexerRule(src='def'))
        return current
    DEF.min_depth = 0

    @depthcontrol
    def ELSE(self):
        current = self.create_node(UnlexerRule(name='ELSE'))
        current += self.create_node(UnlexerRule(src='else'))
        return current
    ELSE.min_depth = 0

    @depthcontrol
    def FLOW(self):
        current = self.create_node(UnlexerRule(name='FLOW'))
        current += self.create_node(UnlexerRule(src='flow'))
        return current
    FLOW.min_depth = 0

    @depthcontrol
    def FOR(self):
        current = self.create_node(UnlexerRule(name='FOR'))
        current += self.create_node(UnlexerRule(src='for'))
        return current
    FOR.min_depth = 0

    @depthcontrol
    def FUNC(self):
        current = self.create_node(UnlexerRule(name='FUNC'))
        current += self.create_node(UnlexerRule(src='func'))
        return current
    FUNC.min_depth = 0

    @depthcontrol
    def IF(self):
        current = self.create_node(UnlexerRule(name='IF'))
        current += self.create_node(UnlexerRule(src='if'))
        return current
    IF.min_depth = 0

    @depthcontrol
    def IMPORT(self):
        current = self.create_node(UnlexerRule(name='IMPORT'))
        current += self.create_node(UnlexerRule(src='import'))
        return current
    IMPORT.min_depth = 0

    @depthcontrol
    def INIT(self):
        current = self.create_node(UnlexerRule(name='INIT'))
        current += self.create_node(UnlexerRule(src='init'))
        return current
    INIT.min_depth = 0

    @depthcontrol
    def NEW(self):
        current = self.create_node(UnlexerRule(name='NEW'))
        current += self.create_node(UnlexerRule(src='new'))
        return current
    NEW.min_depth = 0

    @depthcontrol
    def RETURN(self):
        current = self.create_node(UnlexerRule(name='RETURN'))
        current += self.create_node(UnlexerRule(src='return'))
        return current
    RETURN.min_depth = 0

    @depthcontrol
    def RUN(self):
        current = self.create_node(UnlexerRule(name='RUN'))
        current += self.create_node(UnlexerRule(src='run'))
        return current
    RUN.min_depth = 0

    @depthcontrol
    def SPEC(self):
        current = self.create_node(UnlexerRule(name='SPEC'))
        current += self.create_node(UnlexerRule(src='spec'))
        return current
    SPEC.min_depth = 0

    @depthcontrol
    def STOCK(self):
        current = self.create_node(UnlexerRule(name='STOCK'))
        current += self.create_node(UnlexerRule(src='stock'))
        return current
    STOCK.min_depth = 0

    @depthcontrol
    def THIS(self):
        current = self.create_node(UnlexerRule(name='THIS'))
        current += self.create_node(UnlexerRule(src='this'))
        return current
    THIS.min_depth = 0

    @depthcontrol
    def UNCERTAIN(self):
        current = self.create_node(UnlexerRule(name='UNCERTAIN'))
        current += self.create_node(UnlexerRule(src='uncertain'))
        return current
    UNCERTAIN.min_depth = 0

    @depthcontrol
    def NIL(self):
        current = self.create_node(UnlexerRule(name='NIL'))
        current += self.create_node(UnlexerRule(src='nil'))
        return current
    NIL.min_depth = 0

    @depthcontrol
    def TRUE(self):
        current = self.create_node(UnlexerRule(name='TRUE'))
        current += self.create_node(UnlexerRule(src='true'))
        return current
    TRUE.min_depth = 0

    @depthcontrol
    def FALSE(self):
        current = self.create_node(UnlexerRule(name='FALSE'))
        current += self.create_node(UnlexerRule(src='false'))
        return current
    FALSE.min_depth = 0

    @depthcontrol
    def IDENT(self):
        current = self.create_node(UnlexerRule(name='IDENT'))
        current += self.unlexer.LETTER()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_23', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_23', choice)] = self.unlexer.weights.get(('alt_23', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.LETTER()
                elif choice == 1:
                    current += self.unlexer.UNICODE_DIGIT()

        return current
    IDENT.min_depth = 1

    @depthcontrol
    def ASSIGN(self):
        current = self.create_node(UnlexerRule(name='ASSIGN'))
        current += self.create_node(UnlexerRule(src='='))
        return current
    ASSIGN.min_depth = 0

    @depthcontrol
    def ASSIGN_FLOW1(self):
        current = self.create_node(UnlexerRule(name='ASSIGN_FLOW1'))
        current += self.create_node(UnlexerRule(src='->'))
        return current
    ASSIGN_FLOW1.min_depth = 0

    @depthcontrol
    def ASSIGN_FLOW2(self):
        current = self.create_node(UnlexerRule(name='ASSIGN_FLOW2'))
        current += self.create_node(UnlexerRule(src='<-'))
        return current
    ASSIGN_FLOW2.min_depth = 0

    @depthcontrol
    def COLON(self):
        current = self.create_node(UnlexerRule(name='COLON'))
        current += self.create_node(UnlexerRule(src=':'))
        return current
    COLON.min_depth = 0

    @depthcontrol
    def COMMA(self):
        current = self.create_node(UnlexerRule(name='COMMA'))
        current += self.create_node(UnlexerRule(src=','))
        return current
    COMMA.min_depth = 0

    @depthcontrol
    def DOT(self):
        current = self.create_node(UnlexerRule(name='DOT'))
        current += self.create_node(UnlexerRule(src='.'))
        return current
    DOT.min_depth = 0

    @depthcontrol
    def LPAREN(self):
        current = self.create_node(UnlexerRule(name='LPAREN'))
        current += self.create_node(UnlexerRule(src='('))
        return current
    LPAREN.min_depth = 0

    @depthcontrol
    def RPAREN(self):
        current = self.create_node(UnlexerRule(name='RPAREN'))
        current += self.create_node(UnlexerRule(src=')'))
        return current
    RPAREN.min_depth = 0

    @depthcontrol
    def LCURLY(self):
        current = self.create_node(UnlexerRule(name='LCURLY'))
        current += self.create_node(UnlexerRule(src='{'))
        return current
    LCURLY.min_depth = 0

    @depthcontrol
    def RCURLY(self):
        current = self.create_node(UnlexerRule(name='RCURLY'))
        current += self.create_node(UnlexerRule(src='}'))
        return current
    RCURLY.min_depth = 0

    @depthcontrol
    def LBRACE(self):
        current = self.create_node(UnlexerRule(name='LBRACE'))
        current += self.create_node(UnlexerRule(src='['))
        return current
    LBRACE.min_depth = 0

    @depthcontrol
    def RBRACE(self):
        current = self.create_node(UnlexerRule(name='RBRACE'))
        current += self.create_node(UnlexerRule(src=']'))
        return current
    RBRACE.min_depth = 0

    @depthcontrol
    def SEMI(self):
        current = self.create_node(UnlexerRule(name='SEMI'))
        current += self.create_node(UnlexerRule(src=';'))
        return current
    SEMI.min_depth = 0

    @depthcontrol
    def PLUS_PLUS(self):
        current = self.create_node(UnlexerRule(name='PLUS_PLUS'))
        current += self.create_node(UnlexerRule(src='++'))
        return current
    PLUS_PLUS.min_depth = 0

    @depthcontrol
    def MINUS_MINUS(self):
        current = self.create_node(UnlexerRule(name='MINUS_MINUS'))
        current += self.create_node(UnlexerRule(src='--'))
        return current
    MINUS_MINUS.min_depth = 0

    @depthcontrol
    def AMPERSAND(self):
        current = self.create_node(UnlexerRule(name='AMPERSAND'))
        current += self.create_node(UnlexerRule(src='&'))
        return current
    AMPERSAND.min_depth = 0

    @depthcontrol
    def AND(self):
        current = self.create_node(UnlexerRule(name='AND'))
        current += self.create_node(UnlexerRule(src='&&'))
        return current
    AND.min_depth = 0

    @depthcontrol
    def BANG(self):
        current = self.create_node(UnlexerRule(name='BANG'))
        current += self.create_node(UnlexerRule(src='!'))
        return current
    BANG.min_depth = 0

    @depthcontrol
    def EQUALS(self):
        current = self.create_node(UnlexerRule(name='EQUALS'))
        current += self.create_node(UnlexerRule(src='=='))
        return current
    EQUALS.min_depth = 0

    @depthcontrol
    def NOT_EQUALS(self):
        current = self.create_node(UnlexerRule(name='NOT_EQUALS'))
        current += self.create_node(UnlexerRule(src='!='))
        return current
    NOT_EQUALS.min_depth = 0

    @depthcontrol
    def LESS(self):
        current = self.create_node(UnlexerRule(name='LESS'))
        current += self.create_node(UnlexerRule(src='<'))
        return current
    LESS.min_depth = 0

    @depthcontrol
    def LESS_OR_EQUALS(self):
        current = self.create_node(UnlexerRule(name='LESS_OR_EQUALS'))
        current += self.create_node(UnlexerRule(src='<='))
        return current
    LESS_OR_EQUALS.min_depth = 0

    @depthcontrol
    def GREATER(self):
        current = self.create_node(UnlexerRule(name='GREATER'))
        current += self.create_node(UnlexerRule(src='>'))
        return current
    GREATER.min_depth = 0

    @depthcontrol
    def GREATER_OR_EQUALS(self):
        current = self.create_node(UnlexerRule(name='GREATER_OR_EQUALS'))
        current += self.create_node(UnlexerRule(src='>='))
        return current
    GREATER_OR_EQUALS.min_depth = 0

    @depthcontrol
    def OR(self):
        current = self.create_node(UnlexerRule(name='OR'))
        current += self.create_node(UnlexerRule(src='||'))
        return current
    OR.min_depth = 0

    @depthcontrol
    def PLUS(self):
        current = self.create_node(UnlexerRule(name='PLUS'))
        current += self.create_node(UnlexerRule(src='+'))
        return current
    PLUS.min_depth = 0

    @depthcontrol
    def MINUS(self):
        current = self.create_node(UnlexerRule(name='MINUS'))
        current += self.create_node(UnlexerRule(src='-'))
        return current
    MINUS.min_depth = 0

    @depthcontrol
    def CARET(self):
        current = self.create_node(UnlexerRule(name='CARET'))
        current += self.create_node(UnlexerRule(src='^'))
        return current
    CARET.min_depth = 0

    @depthcontrol
    def EXPO(self):
        current = self.create_node(UnlexerRule(name='EXPO'))
        current += self.create_node(UnlexerRule(src='**'))
        return current
    EXPO.min_depth = 0

    @depthcontrol
    def MULTI(self):
        current = self.create_node(UnlexerRule(name='MULTI'))
        current += self.create_node(UnlexerRule(src='*'))
        return current
    MULTI.min_depth = 0

    @depthcontrol
    def DIV(self):
        current = self.create_node(UnlexerRule(name='DIV'))
        current += self.create_node(UnlexerRule(src='/'))
        return current
    DIV.min_depth = 0

    @depthcontrol
    def MOD(self):
        current = self.create_node(UnlexerRule(name='MOD'))
        current += self.create_node(UnlexerRule(src='%'))
        return current
    MOD.min_depth = 0

    @depthcontrol
    def LSHIFT(self):
        current = self.create_node(UnlexerRule(name='LSHIFT'))
        current += self.create_node(UnlexerRule(src='<<'))
        return current
    LSHIFT.min_depth = 0

    @depthcontrol
    def RSHIFT(self):
        current = self.create_node(UnlexerRule(name='RSHIFT'))
        current += self.create_node(UnlexerRule(src='>>'))
        return current
    RSHIFT.min_depth = 0

    @depthcontrol
    def BIT_CLEAR(self):
        current = self.create_node(UnlexerRule(name='BIT_CLEAR'))
        current += self.create_node(UnlexerRule(src='&^'))
        return current
    BIT_CLEAR.min_depth = 0

    @depthcontrol
    def DECIMAL_LIT(self):
        current = self.create_node(UnlexerRule(name='DECIMAL_LIT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_0)))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_1)))

        return current
    DECIMAL_LIT.min_depth = 0

    @depthcontrol
    def OCTAL_LIT(self):
        current = self.create_node(UnlexerRule(name='OCTAL_LIT'))
        current += self.create_node(UnlexerRule(src='0'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                current += self.unlexer.OCTAL_DIGIT()

        return current
    OCTAL_LIT.min_depth = 0

    @depthcontrol
    def HEX_LIT(self):
        current = self.create_node(UnlexerRule(name='HEX_LIT'))
        current += self.create_node(UnlexerRule(src='0'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_2)))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.HEX_DIGIT()

        return current
    HEX_LIT.min_depth = 1

    @depthcontrol
    def FLOAT_LIT(self):
        current = self.create_node(UnlexerRule(name='FLOAT_LIT'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_65', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_65', choice)] = self.unlexer.weights.get(('alt_65', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.DECIMALS()
            choice = self.choice([0 if [0, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_68', i), 1) for i, w in enumerate([1, 1])])
            self.unlexer.weights[('alt_68', choice)] = self.unlexer.weights.get(('alt_68', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.create_node(UnlexerRule(src='.'))
                if self.unlexer.max_depth >= 1:
                    for _ in self.zero_or_one():
                        current += self.unlexer.DECIMALS()

                if self.unlexer.max_depth >= 2:
                    for _ in self.zero_or_one():
                        current += self.unlexer.EXPONENT()

            elif choice == 1:
                current += self.unlexer.EXPONENT()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='.'))
            current += self.unlexer.DECIMALS()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.EXPONENT()

        return current
    FLOAT_LIT.min_depth = 1

    @depthcontrol
    def RAW_STRING_LIT(self):
        current = self.create_node(UnlexerRule(name='RAW_STRING_LIT'))
        current += self.create_node(UnlexerRule(src='`'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.char_from_list(charset_3))

        current += self.create_node(UnlexerRule(src='`'))
        return current
    RAW_STRING_LIT.min_depth = 0

    @depthcontrol
    def INTERPRETED_STRING_LIT(self):
        current = self.create_node(UnlexerRule(name='INTERPRETED_STRING_LIT'))
        current += self.create_node(UnlexerRule(src='"'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_81', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_81', choice)] = self.unlexer.weights.get(('alt_81', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += UnlexerRule(src=self.char_from_list(charset_4))
                elif choice == 1:
                    current += self.unlexer.ESCAPED_VALUE()

        current += self.create_node(UnlexerRule(src='"'))
        return current
    INTERPRETED_STRING_LIT.min_depth = 0

    @depthcontrol
    def WS(self):
        current = self.create_node(UnlexerRule(name='WS'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_5)))

        return current
    WS.min_depth = 0

    @depthcontrol
    def COMMENT(self):
        current = self.create_node(UnlexerRule(name='COMMENT'))
        current += self.create_node(UnlexerRule(src='/*'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='*/'))
        return current
    COMMENT.min_depth = 0

    @depthcontrol
    def TERMINATOR(self):
        current = self.create_node(UnlexerRule(name='TERMINATOR'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_6)))

        return current
    TERMINATOR.min_depth = 0

    @depthcontrol
    def LINE_COMMENT(self):
        current = self.create_node(UnlexerRule(name='LINE_COMMENT'))
        current += self.create_node(UnlexerRule(src='//'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.char_from_list(charset_7))

        return current
    LINE_COMMENT.min_depth = 0

    @depthcontrol
    def ESCAPED_VALUE(self):
        current = self.create_node(UnlexerRule(name='ESCAPED_VALUE'))
        current += self.create_node(UnlexerRule(src='\\'))
        choice = self.choice([0 if [1, 1, 0, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_91', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_91', choice)] = self.unlexer.weights.get(('alt_91', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='u'))
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='U'))
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_8)))
        elif choice == 3:
            current += self.unlexer.OCTAL_DIGIT()
            current += self.unlexer.OCTAL_DIGIT()
            current += self.unlexer.OCTAL_DIGIT()
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='x'))
            current += self.unlexer.HEX_DIGIT()
            current += self.unlexer.HEX_DIGIT()
        return current
    ESCAPED_VALUE.min_depth = 0

    @depthcontrol
    def DECIMALS(self):
        current = self.create_node(UnlexerRule(name='DECIMALS'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_9)))

        return current
    DECIMALS.min_depth = 0

    @depthcontrol
    def OCTAL_DIGIT(self):
        current = self.create_node(UnlexerRule(name='OCTAL_DIGIT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_10)))
        return current
    OCTAL_DIGIT.min_depth = 0

    @depthcontrol
    def HEX_DIGIT(self):
        current = self.create_node(UnlexerRule(name='HEX_DIGIT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_11)))
        return current
    HEX_DIGIT.min_depth = 0

    @depthcontrol
    def EXPONENT(self):
        current = self.create_node(UnlexerRule(name='EXPONENT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_12)))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_13)))

        current += self.unlexer.DECIMALS()
        return current
    EXPONENT.min_depth = 1

    @depthcontrol
    def LETTER(self):
        current = self.create_node(UnlexerRule(name='LETTER'))
        choice = self.choice([0 if [1, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_101', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_101', choice)] = self.unlexer.weights.get(('alt_101', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.UNICODE_LETTER()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='_'))
        return current
    LETTER.min_depth = 0

    @depthcontrol
    def UNICODE_DIGIT(self):
        current = self.create_node(UnlexerRule(name='UNICODE_DIGIT'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_105', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_105', choice)] = self.unlexer.weights.get(('alt_105', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_14)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_15)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_16)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_17)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_18)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_19)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_20)))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_21)))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_22)))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_23)))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_24)))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_25)))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_26)))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_27)))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_28)))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_29)))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_30)))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_31)))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_32)))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_33)))
        return current
    UNICODE_DIGIT.min_depth = 0

    @depthcontrol
    def UNICODE_LETTER(self):
        current = self.create_node(UnlexerRule(name='UNICODE_LETTER'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_126', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_126', choice)] = self.unlexer.weights.get(('alt_126', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_34)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_35)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_36)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_37)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_38)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_39)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_40)))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_41)))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_42)))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_43)))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_44)))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_45)))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_46)))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_47)))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_48)))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_49)))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_50)))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_51)))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_52)))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_53)))
        elif choice == 20:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_54)))
        elif choice == 21:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_55)))
        elif choice == 22:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_56)))
        elif choice == 23:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_57)))
        elif choice == 24:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_58)))
        elif choice == 25:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_59)))
        elif choice == 26:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_60)))
        elif choice == 27:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_61)))
        elif choice == 28:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_62)))
        elif choice == 29:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_63)))
        elif choice == 30:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_64)))
        elif choice == 31:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_65)))
        elif choice == 32:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_66)))
        elif choice == 33:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_67)))
        elif choice == 34:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_68)))
        elif choice == 35:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_69)))
        elif choice == 36:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_70)))
        elif choice == 37:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_71)))
        elif choice == 38:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_72)))
        elif choice == 39:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_73)))
        elif choice == 40:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_74)))
        elif choice == 41:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_75)))
        elif choice == 42:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_76)))
        elif choice == 43:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_77)))
        elif choice == 44:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_78)))
        elif choice == 45:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_79)))
        elif choice == 46:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_80)))
        elif choice == 47:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_81)))
        elif choice == 48:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_82)))
        elif choice == 49:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_83)))
        elif choice == 50:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_84)))
        elif choice == 51:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_85)))
        elif choice == 52:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_86)))
        elif choice == 53:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_87)))
        elif choice == 54:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_88)))
        elif choice == 55:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_89)))
        elif choice == 56:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_90)))
        elif choice == 57:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_91)))
        elif choice == 58:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_92)))
        elif choice == 59:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_93)))
        elif choice == 60:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_94)))
        elif choice == 61:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_95)))
        elif choice == 62:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_96)))
        elif choice == 63:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_97)))
        elif choice == 64:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_98)))
        elif choice == 65:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_99)))
        elif choice == 66:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_100)))
        elif choice == 67:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_101)))
        elif choice == 68:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_102)))
        elif choice == 69:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_103)))
        elif choice == 70:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_104)))
        elif choice == 71:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_105)))
        elif choice == 72:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_106)))
        elif choice == 73:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_107)))
        elif choice == 74:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_108)))
        elif choice == 75:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_109)))
        elif choice == 76:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_110)))
        elif choice == 77:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_111)))
        elif choice == 78:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_112)))
        elif choice == 79:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_113)))
        elif choice == 80:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_114)))
        elif choice == 81:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_115)))
        elif choice == 82:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_116)))
        elif choice == 83:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_117)))
        elif choice == 84:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_118)))
        elif choice == 85:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_119)))
        elif choice == 86:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_120)))
        elif choice == 87:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_121)))
        elif choice == 88:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_122)))
        elif choice == 89:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_123)))
        elif choice == 90:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_124)))
        elif choice == 91:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_125)))
        elif choice == 92:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_126)))
        elif choice == 93:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_127)))
        elif choice == 94:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_128)))
        elif choice == 95:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_129)))
        elif choice == 96:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_130)))
        elif choice == 97:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_131)))
        elif choice == 98:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_132)))
        elif choice == 99:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_133)))
        elif choice == 100:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_134)))
        elif choice == 101:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_135)))
        elif choice == 102:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_136)))
        elif choice == 103:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_137)))
        elif choice == 104:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_138)))
        elif choice == 105:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_139)))
        elif choice == 106:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_140)))
        elif choice == 107:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_141)))
        elif choice == 108:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_142)))
        elif choice == 109:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_143)))
        elif choice == 110:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_144)))
        elif choice == 111:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_145)))
        elif choice == 112:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_146)))
        elif choice == 113:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_147)))
        elif choice == 114:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_148)))
        elif choice == 115:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_149)))
        elif choice == 116:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_150)))
        elif choice == 117:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_151)))
        elif choice == 118:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_152)))
        elif choice == 119:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_153)))
        elif choice == 120:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_154)))
        elif choice == 121:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_155)))
        elif choice == 122:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_156)))
        elif choice == 123:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_157)))
        elif choice == 124:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_158)))
        elif choice == 125:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_159)))
        elif choice == 126:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_160)))
        elif choice == 127:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_161)))
        elif choice == 128:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_162)))
        elif choice == 129:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_163)))
        elif choice == 130:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_164)))
        elif choice == 131:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_165)))
        elif choice == 132:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_166)))
        elif choice == 133:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_167)))
        elif choice == 134:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_168)))
        elif choice == 135:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_169)))
        elif choice == 136:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_170)))
        elif choice == 137:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_171)))
        elif choice == 138:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_172)))
        elif choice == 139:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_173)))
        elif choice == 140:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_174)))
        elif choice == 141:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_175)))
        elif choice == 142:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_176)))
        elif choice == 143:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_177)))
        elif choice == 144:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_178)))
        elif choice == 145:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_179)))
        elif choice == 146:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_180)))
        elif choice == 147:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_181)))
        elif choice == 148:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_182)))
        elif choice == 149:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_183)))
        elif choice == 150:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_184)))
        elif choice == 151:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_185)))
        elif choice == 152:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_186)))
        elif choice == 153:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_187)))
        elif choice == 154:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_188)))
        elif choice == 155:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_189)))
        elif choice == 156:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_190)))
        elif choice == 157:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_191)))
        elif choice == 158:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_192)))
        elif choice == 159:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_193)))
        elif choice == 160:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_194)))
        elif choice == 161:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_195)))
        elif choice == 162:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_196)))
        elif choice == 163:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_197)))
        elif choice == 164:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_198)))
        elif choice == 165:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_199)))
        elif choice == 166:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_200)))
        elif choice == 167:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_201)))
        elif choice == 168:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_202)))
        elif choice == 169:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_203)))
        elif choice == 170:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_204)))
        elif choice == 171:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_205)))
        elif choice == 172:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_206)))
        elif choice == 173:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_207)))
        elif choice == 174:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_208)))
        elif choice == 175:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_209)))
        elif choice == 176:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_210)))
        elif choice == 177:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_211)))
        elif choice == 178:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_212)))
        elif choice == 179:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_213)))
        elif choice == 180:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_214)))
        elif choice == 181:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_215)))
        elif choice == 182:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_216)))
        elif choice == 183:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_217)))
        elif choice == 184:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_218)))
        elif choice == 185:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_219)))
        elif choice == 186:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_220)))
        elif choice == 187:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_221)))
        elif choice == 188:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_222)))
        elif choice == 189:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_223)))
        elif choice == 190:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_224)))
        elif choice == 191:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_225)))
        elif choice == 192:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_226)))
        elif choice == 193:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_227)))
        elif choice == 194:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_228)))
        elif choice == 195:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_229)))
        elif choice == 196:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_230)))
        elif choice == 197:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_231)))
        elif choice == 198:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_232)))
        elif choice == 199:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_233)))
        elif choice == 200:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_234)))
        elif choice == 201:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_235)))
        elif choice == 202:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_236)))
        elif choice == 203:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_237)))
        elif choice == 204:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_238)))
        elif choice == 205:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_239)))
        elif choice == 206:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_240)))
        elif choice == 207:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_241)))
        elif choice == 208:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_242)))
        elif choice == 209:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_243)))
        elif choice == 210:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_244)))
        elif choice == 211:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_245)))
        elif choice == 212:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_246)))
        elif choice == 213:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_247)))
        elif choice == 214:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_248)))
        elif choice == 215:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_249)))
        elif choice == 216:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_250)))
        elif choice == 217:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_251)))
        elif choice == 218:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_252)))
        elif choice == 219:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_253)))
        elif choice == 220:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_254)))
        elif choice == 221:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_255)))
        elif choice == 222:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_256)))
        elif choice == 223:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_257)))
        elif choice == 224:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_258)))
        elif choice == 225:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_259)))
        elif choice == 226:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_260)))
        elif choice == 227:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_261)))
        elif choice == 228:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_262)))
        elif choice == 229:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_263)))
        elif choice == 230:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_264)))
        elif choice == 231:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_265)))
        elif choice == 232:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_266)))
        elif choice == 233:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_267)))
        elif choice == 234:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_268)))
        elif choice == 235:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_269)))
        elif choice == 236:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_270)))
        elif choice == 237:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_271)))
        elif choice == 238:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_272)))
        elif choice == 239:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_273)))
        elif choice == 240:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_274)))
        elif choice == 241:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_275)))
        elif choice == 242:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_276)))
        elif choice == 243:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_277)))
        elif choice == 244:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_278)))
        elif choice == 245:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_279)))
        elif choice == 246:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_280)))
        elif choice == 247:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_281)))
        elif choice == 248:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_282)))
        elif choice == 249:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_283)))
        elif choice == 250:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_284)))
        elif choice == 251:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_285)))
        elif choice == 252:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_286)))
        elif choice == 253:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_287)))
        elif choice == 254:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_288)))
        elif choice == 255:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_289)))
        elif choice == 256:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_290)))
        elif choice == 257:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_291)))
        elif choice == 258:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_292)))
        elif choice == 259:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_293)))
        elif choice == 260:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_294)))
        return current
    UNICODE_LETTER.min_depth = 0

